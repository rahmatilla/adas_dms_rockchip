import subprocess
import time
import threading
import requests
from datetime import datetime, timedelta
import os

SERVER_URL = "http://your-server/upload_video"
FRONT_CAM_SRC = "/dev/video0"   # —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞
INNER_CAM_SRC = "/dev/video1"   # –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–∞–º–µ—Ä–∞
FRONT_AUDIO_SRC = "hw:1,0"      # –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
INNER_AUDIO_SRC = "hw:2,0"      # –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–∞–º–µ—Ä—ã
DURATION = 60  # —Å–µ–∫—É–Ω–¥
OUTPUT_DIR = "./recordings"
RETENTION_HOURS = 24  # —Ö—Ä–∞–Ω–∏—Ç—å —Å—É—Ç–∫–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)


def cleanup_old_files():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫"""
    now = datetime.now()
    for fname in os.listdir(OUTPUT_DIR):
        fpath = os.path.join(OUTPUT_DIR, fname)
        if os.path.isfile(fpath):
            mtime = datetime.fromtimestamp(os.path.getmtime(fpath))
            if now - mtime > timedelta(hours=RETENTION_HOURS):
                try:
                    os.remove(fpath)
                    print(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {fpath}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {fpath}: {e}")


def record_camera(cam_src, audio_src, prefix):
    while True:
        filename = f"{prefix}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
        filepath = os.path.join(OUTPUT_DIR, filename)

        # ffmpeg: –≤–∏–¥–µ–æ H.264 + –∑–≤—É–∫ AAC
        cmd = [
            "ffmpeg",
            "-y",
            "-t", str(DURATION),
            "-f", "v4l2", "-i", cam_src,        # –≤–∏–¥–µ–æ (V4L2)
            "-f", "alsa", "-i", audio_src,      # –∑–≤—É–∫ (ALSA)
            "-c:v", "libx264", "-preset", "veryfast", "-crf", "23",
            "-c:a", "aac", "-b:a", "128k",
            "-pix_fmt", "yuv420p",
            filepath
        ]

        try:
            subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
            print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤–∏–¥–µ–æ+–∑–≤—É–∫: {filepath}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {prefix}: {e}")
            time.sleep(5)
            continue

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try:
            with open(filepath, "rb") as f:
                files = {"file": (filename, f, "video/mp4")}
                r = requests.post(SERVER_URL, files=files, timeout=120)
                if r.status_code == 200:
                    print(f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {filepath}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {filepath}: {r.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        cleanup_old_files()


def main():
    t1 = threading.Thread(target=record_camera, args=(FRONT_CAM_SRC, FRONT_AUDIO_SRC, "front"))
    t2 = threading.Thread(target=record_camera, args=(INNER_CAM_SRC, INNER_AUDIO_SRC, "inner"))

    t1.start()
    t2.start()

    t1.join()
    t2.join()


if __name__ == "__main__":
    main()
